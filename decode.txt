contract Contract {
    function main() {
        memory[0x40:0x60] = 0x0160;
        storage[0x06] = (storage[0x06] & ~(0xffff << 0xa0)) | (0x0101 << 0xa0);
        storage[0x08] = 0x01;
        storage[0x09] = (storage[0x09] & ~0xffffffffffff00) | 0x0493e0061a8000;
        storage[0x13] = (storage[0x13] & ~((0xffff01 << 0x50) - 0x01)) | 0x0258001e0027100186a000c350;
        var var0 = msg.value;

        if (var0) { revert(memory[0x00:0x00]); }
    
        var temp0 = memory[0x40:0x60];
        var temp1 = code.length - 0x0053b2;
        memory[temp0:temp0 + temp1] = code[0x0053b2:0x0053b2 + temp1];
        var var1 = temp0 + temp1;
        memory[0x40:0x60] = var1;
        var var2 = temp0;
        var0 = 0x000089;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var0, var1, var2, var3, var4, var5, var6, var7 = func_03A9(var1, var2);
        var var8 = var0 & (0x01 << 0xa0) - 0x01;
        var var9 = 0x313ce567;
        var temp2 = memory[0x40:0x60];
        memory[temp2:temp2 + 0x20] = (var9 & 0xffffffff) << 0xe0;
        var var10 = temp2 + 0x04;
        var var11 = 0x20;
        var var12 = memory[0x40:0x60];
        var var13 = var10 - var12;
        var var14 = var12;
        var var15 = var8;
        var var16 = !address(var15).code.length;
    
        if (var16) { revert(memory[0x00:0x00]); }
    
        var temp3;
        temp3, memory[var12:var12 + var11] = address(var15).staticcall.gas(msg.gas)(memory[var14:var14 + var13]);
        var11 = !temp3;
    
        if (!var11) {
            var temp4 = memory[0x40:0x60];
            var temp5 = returndata.length;
            memory[0x40:0x60] = temp4 + (temp5 + 0x1f & ~0x1f);
            var8 = 0x0000fe;
            var10 = temp4;
            var9 = var10 + temp5;
            var8 = func_044F(var9, var10);
            var temp6 = memory[0x40:0x60];
            memory[0x40:0x60] = temp6 + 0x40;
            memory[temp6:temp6 + 0x20] = 0x0c;
            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = 0x48656467657853696e676c65 << 0xa0;
            var temp7 = memory[0x40:0x60];
            memory[0x40:0x60] = temp7 + 0x40;
            memory[temp7:temp7 + 0x20] = 0x01;
            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0x31 << 0xf8;
            var temp8 = memory[0x40:0x60];
            memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;
            memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = 0xdbb8f54117374490c454ab41b80d95cf4a0c3b286124d9b83e346d854dc3efcd;
            memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;
            memory[temp8 + 0x80:temp8 + 0x80 + 0x20] = CHAINID();
            memory[temp8 + 0xa0:temp8 + 0xa0 + 0x20] = address(this);
            var temp9 = temp8 + 0xc0;
            var temp10 = memory[0x40:0x60];
            memory[temp10:temp10 + 0x20] = temp9 - temp10 + ~0x1f;
            memory[0x40:0x60] = temp9;
            memory[0xa0:0xc0] = keccak256(memory[temp10 + 0x20:temp10 + 0x20 + memory[temp10:temp10 + 0x20]]);
            memory[0x80:0xa0] = (var8 << 0xf8) & ~((0x01 << 0xf8) - 0x01);
            storage[0x06] = (storage[0x06] & ~(0xff << 0xb0)) | (0x01 << 0xb0);
            var temp11 = (0x01 << 0xa0) - 0x01;
            storage[0x1b] = (temp11 & var1) | (storage[0x1b] & ~((0x01 << 0xa0) - 0x01));
            var temp12 = var0;
            memory[0x0100:0x0120] = (temp12 << 0x60) & ~((0x01 << 0x60) - 0x01);
            memory[temp9:temp9 + 0x20] = 0x313ce567 << 0xe0;
            var11 = 0x20;
            var8 = temp12 & temp11;
            var9 = 0x313ce567;
            var10 = temp9 + 0x04;
            var12 = memory[0x40:0x60];
            var13 = temp9 - var12 + 0x04;
            var14 = var12;
            var15 = var8;
            var16 = !address(var15).code.length;
        
            if (var16) { revert(memory[0x00:0x00]); }
        
            var temp13;
            temp13, memory[var12:var12 + var11] = address(var15).staticcall.gas(msg.gas)(memory[var14:var14 + var13]);
            var11 = !temp13;
        
            if (!var11) {
                var temp14 = memory[0x40:0x60];
                var temp15 = returndata.length;
                memory[0x40:0x60] = temp14 + (temp15 + 0x1f & ~0x1f);
                var8 = 0x00029f;
                var10 = temp14;
                var9 = var10 + temp15;
                var8 = func_044F(var9, var10);
                var9 = var8;
                var8 = 0x0002ac;
                var10 = 0x0a;
                var11 = 0x00;
                var12 = 0x00046d;
                var13 = var9 & 0xff;
                var14 = var10;
                var15 = 0x00;
            
                if (!var13) {
                    var12 = func_04D1(var13, var14, var15);
                    var8 = var12;
                    // Error: Could not resolve jump destination!
                } else if (var14) {
                    var16 = var14;
                
                    if (var16 == 0x01) {
                        var15 = 0x01;
                    
                    label_0578:
                        var12 = var15;
                        // Error: Could not resolve jump destination!
                    } else if (var16 != 0x02) {
                        var temp16 = var13;
                        var temp17 = var14;
                    
                        if (!(((temp17 < 0x0b) & (temp16 < 0x4e)) | ((temp17 < 0x0133) & (temp16 < 0x20)))) {
                            var16 = 0x00055d;
                            var17 = var13;
                            var var18 = var14;
                            var16, var17 = func_0474(var17, var18);
                        
                            if (var16 <= ~0x00 / var17) {
                                var15 = var17 * var16;
                                goto label_0578;
                            } else {
                                var18 = 0x000574;
                                goto label_057E;
                            }
                        } else {
                            var15 = var14 ** var13;
                            goto label_0578;
                        }
                    } else if (var13 <= 0xff) {
                        var15 = 0x01 << var13;
                        goto label_0578;
                    } else {
                        var var17 = 0x000520;
                    
                    label_057E:
                        memory[0x00:0x20] = 0x4e487b71 << 0xe0;
                        memory[0x04:0x24] = 0x11;
                        revert(memory[0x00:0x24]);
                    }
                } else {
                    var15 = 0x00;
                    goto label_0578;
                }
            } else {
                var temp18 = returndata.length;
                memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        } else {
            var temp19 = returndata.length;
            memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
    
    function func_0367(var arg0) returns (var r0) {
        var temp0 = memory[arg0:arg0 + 0x20];
        var var0 = temp0;
    
        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }
        else { revert(memory[0x00:0x00]); }
    }
    
    function func_0384(var arg0) returns (var r0) {
        var temp0 = memory[arg0:arg0 + 0x20];
        var var0 = temp0;
    
        if (var0 == signextend(0x02, var0)) { return var0; }
        else { revert(memory[0x00:0x00]); }
    }
    
    function func_0397(var arg0) returns (var r0) {
        var temp0 = memory[arg0:arg0 + 0x20];
        var var0 = temp0;
    
        if (var0 == var0 & 0xff) { return var0; }
        else { revert(memory[0x00:0x00]); }
    }
    
    function func_03A9(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5, var r6, var r7) {
        r3 = 0x00;
        r4 = r3;
        r5 = 0x00;
        r6 = r5;
        r7 = 0x00;
        var var5 = r7;
        var var6 = 0x00;
        var var7 = var6;
    
        if (arg0 - arg1 i< 0x0100) { revert(memory[0x00:0x00]); }
    
        var var8 = 0x0003d2;
        var var9 = arg1;
        var8 = func_0367(var9);
        r3 = var8;
        var8 = 0x0003e2;
        var9 = arg1 + 0x20;
        var8 = func_0367(var9);
        r4 = var8;
        var temp0 = arg1;
        r5 = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];
        var8 = 0x0003f9;
        var9 = temp0 + 0x60;
        var8 = func_0397(var9);
        r6 = var8;
        var temp1 = memory[arg1 + 0x80:arg1 + 0x80 + 0x20];
        var8 = temp1;
    
        if (var8 != signextend(0x00, var8)) { revert(memory[0x00:0x00]); }
    
        r7 = var8;
        var8 = 0x000420;
        var9 = arg1 + 0xa0;
        var8 = func_0397(var9);
        var5 = var8;
        var8 = 0x000430;
        var9 = arg1 + 0xc0;
        var8 = func_0384(var9);
        var6 = var8;
        var8 = 0x000440;
        var9 = arg1 + 0xe0;
        var8 = func_0384(var9);
        var temp2 = r7;
        r7 = var8;
        var temp3 = r4;
        r4 = temp2;
        arg0 = temp3;
        var temp4 = r6;
        r6 = var6;
        var temp5 = r3;
        r3 = temp4;
        r0 = temp5;
        var temp6 = r5;
        r5 = var5;
        arg1 = temp6;
        return r0, arg0, arg1, r3, r4, r5, r6, r7;
    }
    
    function func_044F(var arg0, var arg1) returns (var r0) {
        var var0 = 0x00;
    
        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }
    
        var var1 = 0x00046d;
        var var2 = arg1;
        return func_0397(var2);
    }
    
    function func_0474(var arg0, var arg1) returns (var r0, var arg0) {
        var var0 = 0x01;
        var var1 = arg1;
        var var2 = var0;
    
        if (arg0 <= var2) {
        label_04B5:
            arg0 = var1;
            r0 = var0;
            return r0, arg0;
        } else {
        label_0483:
            var temp0 = var1;
        
            if (temp0 > ~0x00 / temp0) {
                var var3 = 0x000499;
                memory[0x00:0x20] = 0x4e487b71 << 0xe0;
                memory[0x04:0x24] = 0x11;
                revert(memory[0x00:0x24]);
            } else if (!(arg0 & var2)) {
                arg0 = arg0 >> var2;
                var temp1 = var1;
                var1 = temp1 * temp1;
                var2 = var2;
            
            label_0479:
            
                if (arg0 <= var2) { goto label_04B5; }
                else { goto label_0483; }
            } else {
                var temp2 = var1;
                var0 = temp2 * var0;
                arg0 = arg0 >> var2;
                var2 = var2;
                var1 = temp2 * temp2;
                goto label_0479;
            }
        }
    }
    
    function func_04D1(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }
}

